Test per il Lexer

1)

(= d 300) // distanza

2)

/*	(= d 300) // distanza

3)

/*	(= d 300) // distanza	*/

4)

(print(* d t))

Test per il Parser 3.1 e per il Valutatore

1)

(2 + 3)

2)

((2 + 3) + (3 * 5))

3)

(((2 + 3) + (3 * 5)) * ((10 / 2) * 5))

4)

// (((2 + 3) + (3 * 5)) * ((10 / 2) * 5))

5)

/*(((2 + 3) + (3 * 5)) * ((10 / 2) * 5)) */


6)

(((2 + 3) + (3 * 5)) * ((10 / 2) /** 5*/))

Test per il Parser 3.2 e per il Traduttore

1)

(print (+ 2 3) 4)

2)

(do (read x) (print (+ x 1)))

3)Deve dare errore di registro non inizializzato

(cond (> x 0) (print x) (else (print y)))

4)Deve funzionare

(do (read x) (read y)(cond (> x 0) (print x) (else (print y))))
	
5)Deve dare errore di registro non inizializzato

(while (> x 0) (do (= x (- x 1))(print x) ) )

6)Deve funzionare

(do (read x) (while (> x 0) (do (= x (- x 1))(print x))))

7)

(do
    (read x)
    (read y)
    (cond (> x y) (print x) (else (print y)))
    (while (> x 0) 
        (do
            (= x (- x 1))
            (print x)
        )
    )
)

8)Euclide

(do
    (read a)
    (read b)
    (while (<> a b)
        (cond (> a b) (= a (- a b)) (else (= b (- b a))))
    )
    (print a)
)

9)Fattoriale

(do
    (read n)
    (= i 2)
    (= f 1)
    (while (<= i n)
        (do
            (= f (* f i))
            (= i (+ i 1))
        )
    )
    (print f)
)

10) Max di 3 num

(do
    (read x)
    (read y)
    (read z)
    (cond (> x y)
        (cond (> x z) (print x) (else (print z)))
        (else
            (cond (> y z) (print y) (else (print z)))
        )
    )
)

11)

(do
    (read a)
    (read b)
    (while (<> a b)
        (cond (> a b) (= a (- a b)) (else (= b (- b a))))
    )
    (print a)
)

12)

(do
	(= x 18)
	(= y 5)
	(= h 3)
	(print x (/ (* x) 2) y (+ x y h) h)
)














